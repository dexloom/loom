use std::time::Duration;

use alloy_eips::eip1559::BaseFeeParams;
use alloy_network::eip2718::Encodable2718;
use alloy_network::{Ethereum, EthereumWallet, TransactionBuilder, TxSigner};
use alloy_primitives::{hex, Address, Bytes, TxKind, B256};
use alloy_provider::Provider;
use alloy_rpc_types::{BlockId, BlockNumberOrTag, TransactionInput, TransactionRequest};
use alloy_rpc_types_trace::geth::AccountState;
use alloy_signer_local::PrivateKeySigner;
use alloy_transport::Transport;
use eyre::{eyre, OptionExt, Result};
use k256::SecretKey;
use lazy_static::lazy_static;
use tracing::{debug, error, info};

use loom_node_debug_provider::AnvilProviderExt;

lazy_static! {
    static ref NO_OWNER_CODE : Vec<u8> = hex::decode("").unwrap();
    static ref NO_OWNER_DEPLOY_PREFIX : Vec<u8> = hex::decode("612c2380600a3d393df3").unwrap();
}
pub const DEFAULT_VIRTUAL_ADDRESS: Address = Address::repeat_byte(0x78);

#[derive(Default)]
pub struct MulticallerDeployer {
    code: Bytes,
    address: Option<Address>,
}

impl MulticallerDeployer {
    pub fn with_address(self, address: Address) -> Self {
        Self { address: Some(address), ..Default::default() }
    }
    pub fn new() -> Self {
        Self { code: Bytes::from(NO_OWNER_CODE.clone()), ..Default::default() }
    }

    pub fn account_info(&self) -> AccountState {
        AccountState { balance: None, code: Some(self.code.clone()), nonce: None, storage: Default::default() }
    }

    pub async fn deploy<P, T>(self, client: P, priv_key: SecretKey) -> Result<Self>
    where
        T: Transport + Clone,
        P: Provider<T, Ethereum> + Send + Sync + Clone + 'static,
    {
        let block = client
            .get_block_by_number(BlockNumberOrTag::Latest, false)
            .await
            .map_err(|e| {
                error!("{e}");
                eyre!("CANNOT_GET_BLOCK")
            })?
            .ok_or_eyre("NO_BLOCK")?;

        let header = block.header;

        let next_base_fee =
            BaseFeeParams::ethereum().next_block_base_fee(header.gas_used, header.gas_limit, header.base_fee_per_gas.unwrap_or_default());

        let signer = PrivateKeySigner::from_bytes(&B256::from_slice(priv_key.to_bytes().as_slice()))?;

        let wallet = EthereumWallet::new(signer);

        debug!("{:?} with gas fee {} ", header.number, next_base_fee);

        let signer_address = wallet.default_signer().address();

        let balance = client.get_balance(signer_address).block_id(BlockId::Number(BlockNumberOrTag::Latest)).await.map_err(|e| {
            error!("{e}");
            eyre!("CANNOT_GET_BALANCE")
        })?;

        info!("{} {}", signer_address, balance);
        let nonce =
            client.get_transaction_count(signer_address).block_id(BlockId::Number(BlockNumberOrTag::Latest)).await.map_err(|e| {
                error!("{e}");
                eyre!("CANNOT_GET_NONCE")
            })?;

        let mut tx_request = TransactionRequest::default()
            .gas_limit(3_000_000)
            .transaction_type(2)
            .max_fee_per_gas(next_base_fee as u128)
            .max_priority_fee_per_gas(1)
            .input(TransactionInput::new(self.code.clone()))
            //.to(Address::ZERO)
            .nonce(nonce);
        tx_request.to = Some(TxKind::Create);

        let tx = tx_request.build(&wallet).await.map_err(|e| {
            error!("{e}");
            eyre!("CANNOT_BUILT_TX")
        })?;

        let pending_tx = client.send_raw_transaction(tx.encoded_2718().as_slice()).await.map_err(|e| {
            error!("{e}");
            eyre!("ERROR_SENDING_TX")
        })?;

        let mut block_number = client.get_block_number().await?;

        let final_block = block_number + 10;
        while block_number < final_block {
            let receipt = client.get_transaction_receipt(*pending_tx.tx_hash()).await?;
            if let Some(receipt) = receipt {
                let address = receipt.contract_address.ok_or_eyre("NOT_DEPLOYED")?;
                return Ok(Self { address: Some(address), ..self });
            }
            tokio::time::sleep(Duration::from_secs(12)).await;
            block_number = client.get_block_number().await?;
        }

        Err(eyre!("NO_RECEIPT_FOUND"))
        //let receipt = pending_tx.with_timeout(Some(Duration::new(10, 0))).get_receipt().await.map_err(|_| eyre!("CANNOT_GET_RECEIPT"))?;
        //let receipt = pending_tx.with_timeout(Some(Duration::new(100, 0))).watch().await.map_err(|_| eyre!("CANNOT_GET_RECEIPT"))?;

        //let address = Address::repeat_byte(3);
    }

    pub async fn set_code<P, T>(self, client: P, address: Address) -> Result<Self>
    where
        T: Transport + Clone,
        P: Provider<T, Ethereum> + AnvilProviderExt<T, Ethereum> + Send + Sync + Clone + 'static,
    {
        AnvilProviderExt::set_code(&client, address, self.code.clone()).await.map_err(|_| eyre!("CANNOT_SET_CODE"))?;

        Ok(Self { address: Some(address), ..self })
    }

    pub fn address(&self) -> Option<Address> {
        self.address
    }
}

#[cfg(test)]
mod test {
    use std::env;
    use std::sync::Arc;

    use loom_node_debug_provider::AnvilDebugProviderFactory;

    use super::*;

    #[tokio::test]
    async fn test_deploy() -> Result<()> {
        let _ = env_logger::try_init_from_env(env_logger::Env::default().default_filter_or("info,loom_multicaller=off"));

        let node_url = env::var("MAINNET_WS")?;

        let anvil_provider = Arc::new(AnvilDebugProviderFactory::from_node_on_block(node_url, 19109956).await?);

        let block = anvil_provider.get_block_by_number(BlockNumberOrTag::Latest, false).await?;
        debug!("Block number : {}", block.unwrap().header.number);

        let priv_key = anvil_provider.privkey()?;

        let multicaller = MulticallerDeployer::new();

        let multicaller = multicaller.deploy(anvil_provider.clone(), priv_key).await?;

        assert_ne!(multicaller.address.unwrap_or_default(), Address::ZERO);

        Ok(())
    }
}
